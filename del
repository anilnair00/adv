trigger:
  batch: true
  branches:
    include:
    - main
    - release
    - master

pr: none

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-2019'
    variables:
      MSBUILDSINGLELOADCONTEXT: 1 # See: https://github.com/SpecFlowOSS/SpecFlow/issues/1912
      clientAppFolder: 'front'
    steps:
    - checkout: self
      clean: false

    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1'
      inputs:
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run .NET Tests'
      continueOnError: true
      inputs:
        command: 'test'
        projects: '**/Core.Tests.csproj'
        arguments: '--configuration Release --no-build'

    - task: PublishTestResults@2
      displayName: 'Publish .NET Test Results'
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        testRunTitle: '.NET Tests'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Functions'
      inputs:
        command: 'publish'
        projects: '**/Functions.csproj'
        arguments: '--configuration Release --no-build --output $(Build.ArtifactStagingDirectory)/Functions'
        publishWebProjects: false

    - task: NodeTool@0
      displayName: 'Use Node 18.11.0'
      inputs:
        versionSpec: 18.11.0

    - task: Npm@1
      displayName: Install Node dependencies
      inputs:
        versionSpec: 8.19.2
        command: 'install'
        workingDir: $(clientAppFolder)

    - task: Npm@1
      displayName: 'Test Angular'
      continueOnError: true
      inputs:
        command: custom
        customCommand: run test-ci
        workingDir: $(clientAppFolder)

    - task: Npm@1
      displayName: Build Angular Project
      inputs:
        command: 'custom'
        # ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
        #   customCommand: 'run build:sit -- --output-path=$(Build.ArtifactStagingDirectory)/Front'
        ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          customCommand: 'run build:sit -- --output-path=$(Build.ArtifactStagingDirectory)/Front'
        ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
          customCommand: 'run build:uat -- --output-path=$(Build.ArtifactStagingDirectory)/Front'
        ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          customCommand: 'run build:prod -- --output-path=$(Build.ArtifactStagingDirectory)/Front'
        workingDir: $(clientAppFolder)

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Publish Build Artifacts'
      artifact: SSET

- stage: SIT
  displayName: SIT
  dependsOn: 'Build'
  condition: and(succeeded('Build'), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/release', 'refs/heads/master'))
  # variables:
  #   # ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
  #   ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
  #     environment: SIT
  #     serviceConnection: ODE SSET DEV
  #     websiteUrl: https://stodessetsitacit.z9.web.core.windows.net/
  #     functionsAppName: acodesset-sit
  #     storageName: stodessetsitacit
  #     websiteStorageSasToken: $(websiteStorageSasTokenSit)
  #   ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
  #     environment: UAT
  #     serviceConnection: ODE SSET UAT
  #     websiteUrl: https://stodessetuatacit.z9.web.core.windows.net/
  #     functionsAppName: acodesset-uat
  #     storageName: stodessetuatacit
  #     websiteStorageSasToken: $(websiteStorageSasTokenUat)
  #   ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  #     environment: PRD
  #     serviceConnection: ODE SSET PROD
  #     websiteUrl: https://stodessetprdacit.z9.web.core.windows.net/
  #     functionsAppName: acodesset-prd
  #     storageName: stodessetprdacit
  #     websiteStorageSasToken: $(websiteStorageSasTokenPrd)
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Stop Functions'
            inputs:
              azureSubscription: 'api'
              Action: 'Stop Azure App Service'
              WebAppName: 'myfncapp001'

          - task: AzureFunctionApp@1
            displayName: 'Deploy Functions'
            inputs:
              azureSubscription: 'api'
              appType: 'functionApp'
              appName: 'myfncapp001'
              package: '$(Pipeline.Workspace)/SSET/Functions/Functions.zip'
              deploymentMethod: 'runFromPackage'

          - task: AzureAppServiceManage@0
            displayName: 'Start Functions'
            inputs:
              azureSubscription: 'api'
              Action: 'Start Azure App Service'
              WebAppName: 'myfncapp001'

          - task: PowerShell@2
            displayName: 'Deploy Front End'
            inputs:
              targetType: 'inline'
              script: |
                # Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                # choco install azcopy10
                azcopy copy $(Pipeline.Workspace)\SSET\Front\*.js '$(url)' --content-type="application/javascript; charset=utf8"
                azcopy sync $(Pipeline.Workspace)\SSET\Front '$(url)' --delete-destination=true

          - task: PowerShell@2
            displayName: 'Check Front End'
            continueOnError: true
            inputs:
              targetType: inline
              script: |
                $response = Invoke-WebRequest -Uri https://tfrgbfde.z20.web.core.windows.net/index.html -Method Head
                if ($response.StatusCode -ne 200) {
                  throw
                }



